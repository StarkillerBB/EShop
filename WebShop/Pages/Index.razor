@page "/"
@inject IProductApiService _ProductService

<PageTitle>Index</PageTitle>

<button type="button" class="btn btn-primary" @onclick="CreateButton">Create Product</button>
<div class="row row-cols-3">

    @foreach (var item in Products)
    {
        <div class="card w-25">
            <img class="card-img-top" src="@item.ImagePath" alt="Image coming soon.">
            <div class="card-body">
                <h5 class="card-title">@item.ProductName</h5>
                <p class="card-text">@item.Description</p>
                <p class="card-text">Pris: @item.Price dkk.</p>
            </div>
            <div class="card-footer">
                <button class="btn btn-success" @onclick="() => ViewButton(item.ID)">View</button>
                <button class="btn btn-warning" @onclick="() => EditButton(item.ID)">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteButton(item.ID)">Delete</button>
            </div>
        </div>
    }
</div>

@if (IsBusy)
{
    <div id="LoadingElement">
        <h2 id="LoadingText" class="text-center ">Loading</h2>
    </div>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private List<Product>? Products { get; set; } = new();

    public bool IsBusy = false;

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        Products = await _ProductService.GetAllProductsAsync();

        IsBusy = false;
    }

    public async Task Reload()
    {
        if (Products != null)
        {
            Products.Clear();
        }

        IsBusy = true;

        Products = await _ProductService.GetAllProductsAsync();

        IsBusy = false;

        StateHasChanged();
    }

    public async Task CreateButton()
    {
        try
        {
            var modal = Modal.Show<WebShop.Pages.Create>();
            await modal.Result;
        }
        catch (Exception e)
        {

            throw;
        }
        await Reload();
    }

    public async Task EditButton(int id)
    {

        ModalParameters parameters = new();

        parameters.Add(nameof(WebShop.Pages.Edit.ID), id);
        try
        {
            var modal = Modal.Show<WebShop.Pages.Edit>("Edit Product", parameters);
            await modal.Result;
        }
        catch (Exception e)
        {

            throw;
        }
        await Reload();
    }

    public async Task ViewButton(int id)
    {

        ModalParameters parameters = new();

        parameters.Add(nameof(WebShop.Pages.View.ID), id);
        try
        {
            var modal = Modal.Show<WebShop.Pages.View>("View Product", parameters);
            await modal.Result;
        }
        catch (Exception e)
        {

            throw;
        }
        await Reload();
    }

    public void DeleteButton(int id)
    {
        _ProductService.DeleteProductAsync(id);

        Reload();
    }
}